
@{
    ViewData["Title"] = "Calender";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stylish Calendar with Tasks</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        .calendar {
            max-width: 800px;
            width: 100%;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .calendar-header {
            background-color: #0078d4;
            color: #fff;
            text-align: center;
            padding: 20px;
            font-size: 24px;
            display: flex;
            justify-content: space-between;
        }

        .calendar-table {
            width: 100%;
            border-collapse: collapse;
            text-align: center;
        }

            .calendar-table th,
            .calendar-table td {
                padding: 15px;
                border: 1px solid #ddd;
                transition: background-color 0.3s ease;
            }

            .calendar-table th {
                background-color: #0078d4;
                color: #fff;
            }

        .calendar-day {
            cursor: pointer;
            font-size: 18px;
            position: relative;
        }

            .calendar-day:hover {
                background-color: #f0f0f0;
            }

        .today {
            background-color: #4caf50;
            color: #fff;
            border-radius: 50%;
        }

        .tasks {
            list-style: none;
            padding: 0;
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
        }

            .tasks li {
                background-color: #0078d4;
                color: #fff;
                padding: 5px;
                margin: 5px;
                border-radius: 5px;
                cursor: pointer;
            }

                .tasks li:hover {
                    background-color: #005a9e;
                }

        #prev-month,
        #next-month {
            cursor: pointer;
        }

            #prev-month:hover,
            #next-month:hover {
                background-color: #005a9e;
            }

        #current-month {
            flex-grow: 1;
            text-align: center;
        }
    </style>
</head>

<body>

    <div class="calendar">
        <div class="calendar-header">
            <span id="prev-month">&lt;</span>
            <span id="current-month">March 2024</span>
            <span id="next-month">&gt;</span>
        </div>
        <table class="calendar-table" id="calendar-table">
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>
            <tbody>
                <!-- JavaScript will dynamically generate the calendar here -->
            </tbody>
        </table>
    </div>

    <script>
       document.addEventListener('DOMContentLoaded', function () {
    const calendarTable = document.getElementById('calendar-table');
    const currentMonthElement = document.getElementById('current-month');
    const prevMonthButton = document.getElementById('prev-month');
    const nextMonthButton = document.getElementById('next-month');
    const taskInfoContainer = document.getElementById('task-info-container'); // Nowy kontener na informacje o zadaniach

    let currentDate = new Date();
    currentDate.setDate(1); // Set to the first day of the month

    function generateCalendar(date) {
        // Clear existing rows
        while (calendarTable.rows.length > 1) {
            calendarTable.deleteRow(1);
        }

        const daysInMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay();

        let dayCounter = 1;

        for (let i = 0; i < 6; i++) {
            const row = calendarTable.insertRow();
            for (let j = 0; j < 7; j++) {
                const cell = row.insertCell();
                if ((i === 0 && j < firstDay) || dayCounter > daysInMonth) {
                    cell.textContent = '';
                } else {
                    cell.textContent = dayCounter;
                    dayCounter++;
                    cell.classList.add('calendar-day');

                    // Highlight today's date
                    const today = new Date();
                    if (
                        date.getMonth() === today.getMonth() &&
                        date.getFullYear() === today.getFullYear() &&
                        parseInt(cell.textContent) === today.getDate()
                    ) {
                        cell.classList.add('today');
                    }

                    // Dodaj obsługę dodawania zadań
                    cell.addEventListener('click', function () {
                        const task = prompt('Dodaj nowe zadanie:');
                        if (task) {
                            const taskItem = document.createElement('li');
                            taskItem.textContent = task;

                            // Dodaj listę zadań tylko jeśli jeszcze nie istnieje
                            if (!cell.querySelector('.tasks')) {
                                const taskList = document.createElement('ul');
                                taskList.classList.add('tasks');
                                taskList.appendChild(taskItem);
                                cell.appendChild(taskList);
                            } else {
                                cell.querySelector('.tasks').appendChild(taskItem);
                            }

                            // Aktualizuj informacje o zadaniach
                            updateTaskInfo();
                        }
                    });

                    // Dodaj obsługę wyświetlania informacji o zadaniach po najechaniu
                    cell.addEventListener('mouseover', function () {
                        showTaskInfo(cell);
                    });

                    cell.addEventListener('mouseout', function () {
                        hideTaskInfo();
                    });
                }
            }
        }
    }

    function updateCalendar() {
        currentMonthElement.textContent = new Intl.DateTimeFormat('en-US', { month: 'long', year: 'numeric' }).format(currentDate);
        generateCalendar(currentDate);
    }

    function updateTaskInfo() {
        // Wypełnij informacje o zadaniach
        const taskInfoList = taskInfoContainer.querySelector('.tasks-info');
        taskInfoList.innerHTML = ''; // Wyczyść poprzednie zadania

        // Przejrzyj komórki kalendarza i zbierz informacje o zadaniach
        const cells = document.querySelectorAll('.calendar-day');
        cells.forEach(cell => {
            const tasks = cell.querySelector('.tasks');
            if (tasks) {
                const taskItems = tasks.querySelectorAll('li');
                taskItems.forEach(taskItem => {
                    const taskInfoItem = document.createElement('li');
                    taskInfoItem.textContent = taskItem.textContent;
                    taskInfoList.appendChild(taskInfoItem);
                });
            }
        });
    }

    function showTaskInfo(cell) {
        const tasks = cell.querySelector('.tasks');
        if (tasks) {
            const taskInfoList = taskInfoContainer.querySelector('.tasks-info');
            taskInfoList.innerHTML = ''; // Wyczyść poprzednie zadania

            const taskItems = tasks.querySelectorAll('li');
            taskItems.forEach(taskItem => {
                const taskInfoItem = document.createElement('li');
                taskInfoItem.textContent = taskItem.textContent;
                taskInfoList.appendChild(taskInfoItem);
            });

            taskInfoContainer.style.display = 'block';
        }
    }

    function hideTaskInfo() {
        taskInfoContainer.style.display = 'none';
    }

    prevMonthButton.addEventListener('click', function () {
        currentDate.setMonth(currentDate.getMonth() - 1);
        updateCalendar();
    });

    nextMonthButton.addEventListener('click', function () {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendar();
    });

    updateCalendar(); // Initial calendar generation
});

    </script>

</body>

</html>



